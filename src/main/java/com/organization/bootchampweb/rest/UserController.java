package com.organization.bootchampweb.rest;

import com.organization.bootchampweb.model.User;
import com.organization.bootchampweb.service.SecurePassword;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import org.springframework.web.bind.annotation.RequestMapping;

import com.organization.bootchampweb.dao.UserRepository;

import java.util.Optional;

@RestController    // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private SecurePassword securePassword;


    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
    @GetMapping(path = "/getById")
    public @ResponseBody User getById(@RequestParam Long id){
        // This returns a JSON or XML with the id user
        return userRepository.findById(id);
    }
    @GetMapping(path = "/getByEmail")
    public @ResponseBody User getByEmail(@RequestParam String email){
        // This returns a JSON or XML with the id user
        return userRepository.findByEmail(email);
    }
    @GetMapping(path = "/getByUserName")
    public @ResponseBody User getByUserName(@RequestParam String useraName){
        // This returns a JSON or XML with the id user
        return userRepository.findByUserName(useraName);
    }
    @PostMapping("/addUser")
    public User createUser(@RequestBody User user){

        if(userRepository.existsByEmail(user.getEmail())){
            throw new RuntimeException("The email already exist");}

        if(userRepository.existsByUserName(user.getUserName())){
            throw new RuntimeException("The Username already exist");}

        String newPass=securePassword.securePassword(user.getPassword(), "Base64");
        user.setPassword(newPass);
        return userRepository.save(user);
    }
    @DeleteMapping("/deleteById")
    public @ResponseBody void deleteById(@RequestParam Integer id){
        userRepository.deleteById(id);
    }

    @PutMapping(path="/modify")
    public @ResponseBody User modifyUser(@RequestBody User user ) {
        return userRepository.save(user);


    }
}