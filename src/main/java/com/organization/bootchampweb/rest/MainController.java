package com.organization.bootchampweb.rest;

import com.organization.bootchampweb.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import org.springframework.web.bind.annotation.RequestMapping;

import com.organization.bootchampweb.dao.UserRepository;

import java.util.Optional;

@RestController    // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping(path = "/add") // Map ONLY GET Requests
    public @ResponseBody
    String addNewUser(@RequestParam String name
            , @RequestParam String email, @RequestParam Integer dni) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        n.setDni(dni);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
    @GetMapping(path = "/getById")
    public @ResponseBody User getById(@RequestParam Long id){
        // This returns a JSON or XML with the id user
        return userRepository.findById(id);
    }

    /*@RequestMapping(value = "/testingPost", method = RequestMethod.POST)
    public User user(@RequestBody User inputPayload) {
        User response = new User();
        response.setName(inputPayload.getName());
        response.setEmail(inputPayload.getEmail());
        response.setDni(inputPayload.getDni());
        userRepository.save(response);
        return response;
    }
}*/
    /*@PostMapping("/testingPost")
    public User createUser(@RequestBody User inputPayload){
        User response = new User();
        response.setName(inputPayload.getName());
        response.setEmail(inputPayload.getEmail());
        response.setDni(inputPayload.getDni());
        userRepository.save(response);
        return response;
    }
}*/
    @PostMapping("/addUser")
    public User createUser(@RequestBody User user){
        if(user.getEmail().contains("@")&& user.getEmail().contains(".")){
            return userRepository.save(user);
        }
        return null;
    }
}